---
title: "Intro to BKT"
subtitle: "TM Module 1: Case Study Key"
author: "LASER Institute"
date: today 
format:
  html:
    toc: true
    toc-depth: 4
    toc-location: right
theme:
  light: simplex
  dark: cyborg
editor: visual
jupyter: python3
bibliography: lit/references.bib
---

## 1. PREPARE

Our first KT case study is guided by the work of

Our primary aim for this case study is to gain some hands-on experience with essential Python packages and functions for KT. We learn how to \[BROAD GOAL\] Specifically, this case study will cover the following topics pertaining to each data-intensive workflow process [@krumm2018]:

1.  **Prepare**: Prior to analysis, we'll look at the context from which our data came, formulate some research questions, and get introduced the {X} and {X} packages for BKT.

2.  **Wrangle**: In the wrangling section of our case study, we will learn...

3.  **Explore**: With our network data tidied, we learn to calculate...

4.  **Model**: We conclude our analysis by...

5.  **Communicate**:

### 1a. Review the Research

![](img/baker-corbet.png)

Pittinsky, M., & Carolan, B. V. (2008). Behavioral versus cognitive classroom friendship networks.¬†*Social Psychology of Education*,¬†*11*(2), 133-147.

#### Abstract

Some students, when working in interactive learning environments, attempt to ‚Äúgame the system‚Äù, attempting to succeed in the environment by exploiting properties of the system rather than by learning the material and trying to use that knowledge to answer correctly. In this paper, we present a system that can accurately detect whether a student is gaming the system, within a Cognitive Tutor mathematics curricula. Our detector also distinguishes between two distinct types of gaming which are associated with different learning outcomes. We explore this detector‚Äôs generalizability, and find that it transfers successfully to both new students and new tutor lessons.

#### Research Questions

The central question guiding this investigation was:

> Is the Detector Accurate Enough to Use to Drive Interventions?

We will be using this question to guide our own analysis...

#### Data Collection

How data was collected...

#### Analyses

#### Key Findings

> Finding

#### ‚ùìQuestion

Type a brief response in the space below:

-   YOUR RESPONSE HERE

### 1b. Load Packages

A Python package or library is a collection of modules that offer a set of functions, classes, and variables that enable developers and data analysts to perform many tasks without writing their code from scratch. These can include everything from performing mathematical operations to handling network communications, manipulating images, and more.

#### pyBKT üì¶

Based on the work of Zachary A. Pardos and Matthew J. Johnson, the {pyBKT} package is a Python implementation of the Bayesian Knowledge Tracing algorithm and variants, estimating student cognitive mastery from problem solving sequences [@badrinath2021pybkt].

pyBKT can be used to define and fit many BKT variants, including these from the literature:

-   Individual student priors, learn rate, guess, and slip

-   Individual item guess and slip

-   Individual item or resource learn rate

Click the green arrow in the right corner of the "code chunk" that follows to load the {pandas} library introduced in LA Workflow labs.

```{python}

from pyBKT.models import Model

```

#### pandas üì¶

![](img/pandas.svg){width="30%"}

One package that we'll be using extensively is {pandas}. [Pandas](https://pandas.pydata.org) [@mckinney-proc-scipy-2010] is a powerful and flexible open source data analysis and wrangling tool for Python that is used widely by the data science community.

Click the green arrow in the right corner of the "code chunk" that follows to load the {pandas} library introduced in LA Workflow labs.

```{python}

import pandas as pd

```

#### SciPy üì¶

![](img/scipy.svg){width="20%"}

SciPy is a collection of mathematical algorithms and convenience functions built on NumPy. It adds significant power to Python by providing the user with high-level commands and classes for manipulating and visualizing data.

Click the green arrow in the right corner of the "code chunk" that follows to load the {scipy} library:

```{python}

import scipy as sp

```

#### Pyplot üì¶

![](img/matplotlib.png){width="20%"}

Pyplot is a module in the {matplotlib) package, a comprehensive library for creating static, animated, and interactive visualizations in Python. **`pyplot`** provides a MATLAB-like interface for making plots and is particularly suited for interactive plotting and simple cases of programmatic plot generation.

Click the green arrow in the right corner of the "code chunk" that follows to load **`pyplot`**:

```{python}

import matplotlib.pyplot as plt

```

#### 

#### **üëâ Your Turn** **‚§µ**

Use the code chunk below to import the pyBKT package as `nx`:

```{python}
# YOUR CODE HERE


```

## 2. WRANGLE

In general, data wrangling involves some combination of cleaning, reshaping, transforming, and merging data [@wickham2016r]. As highlighted in @estrellado2020e, wrangling network data can be even more challenging than other data sources since network data often includes variables about both individuals and their relationships.

For our data wrangling in module 1, we're keeping it relatively simple since working with relational data is a bit of a departure from working with rectangular data frames. Our primary goals for Lab 1 is learning how to:

a.  **Import Data from Excel**. In this section, we learn about the `read_xlsx()` function for importing network data stored in two common formats: matrices and nodelists.

b.  **Convert to Network Data Structure**. Before we can create our sociogram, we'll first need to convert our data frames into special data structure for storing graphs.

### 2a. Import Data

One of our primary goals for this case study to is create network graph called a sociogram that visually describes what a network "looks like" from the perspective of both students and their teacher. To do so, we'll need to import two Excel files originally obtained from the [Social Network Analysis and Education companion site](#0). Both files contain edges stored as a matrix and are included in the lab-1 data folder of your R Studio project. A description of each file from the companion website is copied below along with a link to the original file:

1.  [**99472_ds3.xlsx**](https://studysites.sagepub.com/carolan/study/materials/datasets/99472_ds3.xlsx) This adjacency matrix consists of **student-reported** friendship relations among 27 students in one class in the fall semester. These data are directed and unweighted; a friendship tie is present if the student reported that another was either a best friend or friend.

2.  [**99472_ds5.xlsx**](https://studysites.sagepub.com/carolan/study/materials/datasets/99472_ds5.xlsx) This adjacency matrix consists of the **teacher-reported** friendship relations among 27 students in one class in the fall semester. These data are directed and unweighted; a friendship tie is present if the teacher reported that students were either a best friend or friend.

Relational data (i.e., information about the relationships among individuals in a network) are sometimes stored as an [adjacency matrix](https://en.wikipedia.org/wiki/Adjacency_matrix). Network data stored as a matrix includes a column and row for each actor in our network and each cell contains information about the **tie** between each pair of actors, often referred to as **edges**. In our case, each tie is **directed,** meaning that relationships between actors may not necessarily be reciprocated. For example, student 1 may report student 2 as a friend, but student 2 may or may not report student 1 as friend. If both student 2 and student 2 indicate each other as friends, then this tie, or edge, is considered **reciprocal** or **mutual**.

#### Import Student-Reported Friendships

Let's use the¬†`read_excel()`¬†function from the {pandas} package to import the¬†`student-reported-friends.xlsx`¬†file. In our function, we'll include an important "argument" called¬†`header =`¬†and set it to¬†`None`. This tells Python that our file does not include column names and is important to include since our file is a simple matrix with no header or column names and by default this argument is set to true and would assign the first row which contains data about student friendships as names for each column.

Finally, we need to make sure we can reference the matrix we import and use it later in our analysis. To do so, will save it to our "Environment" by assigning it to a variable which we will call¬†`student_friends`.

```{python}

student_friends = pd.read_excel("data/student-reported-friends.xlsx", header = None)

```

#### **üëâ Your Turn** **‚§µ**

Before importing our teacher-reported friendship file, use the code chunk below to quickly inspect the `student_friends` data we just imported to see what we'll be working with.

```{python}
# YOUR CODE HERE


```

You should now see a 27 x 27 data table that represents student-reported friendships stored as an adjacency matrix. As noted on pg. 140 of @pittinsky2008behavioral, students were given a class roster and asked to describe their relationship with each student using the following choices: best friend, friend, know-like, know, know-dislike, strongly dislike, and do not know. In the terminology of network analysis, these sociometric data are **valued** (degrees of friendship, not just yes or no).

For the purpose of the their study, and for this case study as well, all ‚Äúbest friend‚Äù and ‚Äúfriend‚Äù choices are coded as ‚Äò1‚Äô (friend), while all other choices are coded as ‚Äò0‚Äô (not friend). This process of taking a valued relationship or tie (i.e., degrees of friendship, not just yes or no) and simplifying into a binary yes/no relationship is referred to as **dichotomization** and we'll explore the benefits and drawbacks of this process in Module 4.

In addition to ties being valued or binary, they can also be undirected or directed. For example, in an **undirected** network**,** a friendship either exists between two actors or it does not. In a **directed** network, one actor or **ego** may indicate a relationship (e.g., friend or best friend), but the other actor or **alter** may indicate there is no friendship. If the relationship is present between both actors, however, the tie or edge is considered **reciprocated**.

#### ‚ùìQuestion

Provide a brief response in the space below to the following questions: Do the data we just imported indicate that these friendship ties are directed or undirected? How can you tell?

-   YOUR RESPONSE HERE

#### Import Student Attributes

Before importing our teacher-reported student friendships, we have another important file to import. As noted by @carolan2014 , most social network analyses include variables that describe the attributes of actors in a network. These attribute variables can be either categorical (e.g., sex, race, etc.) or continuous in nature (e.g., test scores, number of times absent, etc.).

Actor attributes are stored a rectangular array, or data frame, in which rows represent a social entity (e.g., students, staff, schools, etc.), columns represent variables, and cells consist of values on those variables. This file containing a list of actors, or nodes, along with their attributes is sometimes referred to as a **node list**.

Let's go ahead and read our node list into R and store as a new object called `student_attributes`:

```{python}

student_attributes = pd.read_excel("data/student-attributes.xlsx")

student_attributes
```

Note that when we imported this time, we left out the `header = None` argument. As mentioned earlier, by default this argument is set to TRUE and assumes the first row of your data frame will contain names of the variables. Since this was indeed the case, we didn't need to include this argument. We could, however, have included this argument and set it to `TRUE` and our resulting output would still be the same.

#### **üëâ Your Turn** **‚§µ**

Complete the code chunk below to import the `teacher-reported-friends.xlsx`¬†file and inspect your `teacher_friends` object.

```{python import-teacher}
# YOUR CODE HERE

teacher_friends = ___("___", header = None)

teacher_friends
```

### 2b. Make a Network Data Structure

Before we can begin exploring our data through through network visualization, we must first convert our¬†`student_friends`¬†object to a network using {networkx}.

#### **Convert to Graph Object**

The¬†`from_pandas_adjacency()`¬†function can easily convert pandas data frame to a graph.

Run the following code to convert our adjacency matrix to directed network graph data structure, save as a new object called¬†`student_network`, and `print()` some basic information about our network:

```{python}

student_network = nx.from_pandas_adjacency(student_friends, create_using = nx.DiGraph())

print(student_network)
```

Note that the **`create_using`** argument is used to specify the type of graph you want to create when using graph creation functions, such as **`nx.from_pandas_edgelist`**, **`nx.from_numpy_matrix`**, or in our case **`nx.from_pandas_adjacency`**. This argument allows you to define the graph class (e.g., undirected, directed, multigraph, etc.) that should be used for constructing the graph.

By default, many NetworkX functions create an undirected graph. If you want to create a different type of graph, such as a directed graph (**`DiGraph`**), a multi-graph (**`MultiGraph`**) with multiple types of ties, or a directed multi-graph (**`MultiDiGraph`**), you can pass the corresponding class to the **`create_using =`** parameter. This is particularly useful when the nature of your data or the analysis you intend to perform requires a specific type of graph.

#### Add Node Attributes

Although an underlying assumption of social network analysis is that social relations are often more important for understanding behaviors and attitudes than attributes related to one's background (e.g., age, gender, etc.), these attributes often still play an important role in SNA. Specifcially attributes can enrich our understanding of networks by adding contextual information about actors and their relations. For example, actor attributes can be used to for:

1.  **Community Detection**: Identifying groups with shared attributes, revealing substructures within the network.
2.  **Homophily Analysis**: Examining the tendency for similar individuals to connect, shedding light on social cohesion.
3.  **Influence and Diffusion**: Understanding how characteristics of individuals affect the spread of information or behaviors.
4.  **Centrality Analysis**: Correlating attributes with centrality measures to assess individuals' influence based on their traits.
5.  **Network Dynamics**: Investigating how changes in attributes correspond to the evolution of network structures.
6.  **Statistical Modeling**: Incorporating attributes in models to explore the interplay between individual traits and network formation.
7.  **Visualization**: Enhancing network visualizations by using attributes to differentiate nodes, making patterns more discernible.

We will explore several of these use cases throughout the SNA modules, but for this case study, our focus will be to incoporate some student attribtues to enhance our visualizations.

Run the following code to add the attributes in our `student_attributes` data frame to our network object `student_network` that we created earlier:

```{python}

for _, row in student_attributes.iterrows():
    node_id = row['id']
    if node_id in student_network:
        student_network.nodes[node_id]['name'] = row['name']
        student_network.nodes[node_id]['gender'] = row['gender']
        student_network.nodes[node_id]['achievement'] = row['achievement']
        student_network.nodes[node_id]['gender_num'] = row['gender_num']
        student_network.nodes[node_id]['achievement_num'] = row['achievement_num']
```

There is a lot going on this this code so let's unpack this line by line. This code snippet iterates over each row of our `student_attributes` data frame and updates our network object named `student_network` with attributes for each student (node). Here's a step-by-step explanation:

1.  `for _, row in student_attributes.iterrows():`
    -   This line starts a loop that iterates through each row of the `student_attributes` DataFrame. The `iterrows()` function generates a sequence of index and row pairs for the DataFrame. Here, `_` is a placeholder for the row index, which is not used in the loop, and `row` represents the actual data of the current row as a Series object.
2.  `node_id = row['id']`
    -   For each row, this line extracts the value from the 'id' column, which is assumed to represent the unique identifier (ID) of a student. This ID will be used to reference the corresponding node in the `student_network` graph.
3.  `if node_id in student_network:`
    -   This conditional statement checks if a node with the ID `node_id` exists in the `student_network` graph. This is important to avoid attempting to set attributes for non-existent nodes.
4.  Inside the `if` block, the following lines set attributes for the node corresponding to `node_id` in the `student_network` graph:
    -   `student_network.nodes[node_id]['gender'] = row['gender']`
        -   This line sets the 'gender' attribute of the node to the value found in the 'gender' column of the current row.
    -   `student_network.nodes[node_id]['achievement'] = row['achievement']`
        -   This line sets the 'achievement' attribute of the node to the value found in the 'achievement' column of the current row.
    -   `student_network.nodes[node_id]['gender_num'] = row['gender_num']`
        -   This line sets the 'gender_num' attribute (likely a numerical representation of gender) of the node to the value found in the 'gender_num' column of the current row.
    -   `student_network.nodes[node_id]['achievement_num'] = row['achievement_num']`
        -   This line sets the 'achievement_num' attribute (possibly a numerical representation of achievement level) of the node to the value found in the 'achievement_num' column of the current row.
    -   `student_network.nodes[node_id]['name'] = row['name']`
        -   This line sets the 'name' attribute of the node to the value found in the 'name' column of the current row, assigning a personal name to the node.

Before we move on, let's take a quick look at each node's attribute data to make sure our code above worked as intended:

```{python}

list(student_network.nodes(data=True))

```

Excellent, each node in our network object now

#### **üëâ Your Turn** **‚§µ**

Complete the code chunk below to convert your `teacher_friends` object first to a matrix and then to a network object that contains information about both the teacher-reported student friendships and the attributes of students:

```{python}

# YOUR CODE HERE

teacher_network = nx.___(___, create_using = nx.DiGraph())

for _, row in ___.iterrows():
    node_id = row['id']
    if node_id in ___:
        teacher_network.nodes[node_id]['name'] = row['name']
        teacher_network.nodes[node_id]['gender'] = row['gender']
        teacher_network.nodes[node_id]['achievement'] = row['achievement']
        teacher_network.nodes[node_id]['gender_num'] = row['gender_num']
        teacher_network.nodes[node_id]['achievement_num'] = row['achievement_num']

print(teacher_network)

```

#### ‚ùìQuestion

Now answer the following questions:

1.  How many students are in our network?

    -   YOUR RESPONSE HERE

2.  Who reported more friendships, teachers or students? How do you know?

    -   YOUR RESPONSE HERE

## 3. EXPLORE

As noted in our course readings, one of the defining characteristics of the social network perspective is its use of graphic imagery to represent actors and their relations with one another. To emphasize this point, @carolan2014 reported that:

> The visualization of social networks has been a core practice since its foundation more than 100 years ago and remains a hallmark of contemporary social network analysis.¬†

Network visualization can be used for a variety of purposes, ranging from highlighting key actors to even serving as works of art.

This excellent figure from Katya Ognyanova's also excellent tutorial on [Static and Dynamic Network Visualization with R](https://kateto.net/network-visualization/) helps illustrate the variety of goals a good network visualization can accomplish:

![](img/viz-goals.jpeg){width="80%"}

In Section 3 work focus on just visualization, and will use the {tidygraph} package to create a network sociogram to help visually describe our network and compare teacher and student reported friendships. Specifically, in this section we'll learn to make a:

a.  **Simple Sociogram**. We learn about the basic `draw()` function for creating a very quick network plot when just a quick visual inspection is needed.

b.  **Sophisticated Sociogram**. We then dive deeper in to the `draw_kamada_kawai()` function with various parameters and learn to plot nodes and edges in our network and tweak key elements like the size, shape, and position of nodes and edges to better at communicating key findings.

### 3a. Simple Sociograms

These visual representations of the actors and their relations, i.e. the network, are called a¬†**sociogram**. Actors who are most central to the network, such as those with higher node degrees, or those with more friends in our case study, are usually placed in the center of the sociogram and their ties are placed near them.

In the code chunk below, use the¬†`draw()`¬†function with your¬†`student_network`¬†object to see what the basic plot function produces:

```{python}

nx.draw(student_network)
plt.show()

```

If this had been a smaller network it might have been a little more useful but one important insight is that we have already identified an "isolate" in our network, i.e., student 18 who neither named others as a friend or was named by others as a friend.

Fortunately, the {networkx} package includes a range of [drawing](https://networkx.org/documentation/stable/reference/drawing.html) and functions for improving for improving the visual design of network graphs.

Run the following code to try out the¬†`kamada_kawai_layout()`¬†layout and add some informative labels to our graph:

```{python}

# Position the nodes using one of the layout algorithms
pos = nx.spring_layout(student_network)

# Draw the graph without node labels
nx.draw(student_network, pos, with_labels=False)

# Extract the 'name' attribute from each node to use as labels
labels = nx.get_node_attributes(G, 'name')

# Draw node labels using the 'name' attribute
nx.draw_networkx_labels(G, pos, labels, font_size=8)

# Display the graph
plt.show()

```

Much better. Now, let's unpack what's happening in this code:

-   **`nx.kamada_kawai_layout(G)`** computes the position of nodes based on the Kamada-Kawai layout algorithm, which is designed to produce visually appealing layouts by considering the graph's structure.

-   **`nx.draw()`** is used to draw the graph, with **`with_labels=True`** ensuring that the default node identifiers are used as labels.

-   The **`node_color`** and **`node_size`** parameters are set for visual customization, but you can adjust these according to your preference.

This generates a visualization of your network with nodes positioned according to the Kamada-Kawai layout and labeled with their default identifiers.

#### **üëâ Your Turn** **‚§µ**

Use the code chunk below to try out these simple sociogram functions on your `teacher_network` object you created above:

```{r teacher-sociogram}
# YOUR CODE HERE

```

Not exactly great graphs, but they already provided some insight into our research questions. Specifically, we can see visually that teacher and student reported peer networks are very different!

### 3b. Sophisticated Sociograms

Not exactly great graphs, but they already provided some insight into our research questions. Specifically, we can see visually that teacher and student reported peer networks are very different!

Run the following code chunk to see some additional arguments were added into the new layout. We assign different colors for gender and adjust the size of nodes, font, width, and transparency of the arrows.

```{python}
plt.figure(figsize=(50,35))
pos = nx.kamada_kawai_layout(student_network)

node_colors = ["lightsteelblue" if student_attributes.loc[n].at['gender_num'] == 0 else "salmon" for n in range(student_attributes.shape[0])]
#set nodes
node_options={"node_color": node_colors,"node_size":100}
#set edges
edge_options = {"width":.50, "alpha":.5, "edge_color":"black"} #width of the lines and their transparency

#set labels
node_label_options = {"font_size":7, "font_color":"black", "verticalalignment":"bottom", "horizontalalignment":"left"}

#draw nodes, edges, labels
nx.draw_networkx_nodes(student_network, pos, **node_options)
nx.draw_networkx_edges(student_network, pos, **edge_options)
nx.draw_networkx_labels(student_network, pos, **node_label_options)
plt.show()
```

#### ‚ùìQuestion

What do the colors of the nodes represent in the sociogram above?

-   YOUR RESPONSE HERE

#### Add Node Sizes

We can also count the number of friendships for each student and visualize it on our graph with different sizes of nodes.

```{python}
from collections import Counter
friends = [edge[0] for edge in student_network.edges()]

# Counting the number of friends
num_friends = Counter(friends)

#store in a data frame
friendships = pd.DataFrame(list(num_friends.items()), columns=['student', 'number of friends'])
print(friendships)
```

We can see that our student 18 is missing from the list as it was not present in the edges.

That is why we need to add 18th student to our data frame and sort it so that the number of friendships is consistent with the number of students we have.

```{python}
new_row = pd.DataFrame({'student': [18], 'number of friends': [0]})
friendships = pd.concat([friendships, new_row], ignore_index=True)
friendships = friendships.sort_values(by='student')
print(friendships)
```

Now we can see our 18th student with 0 friends reported.

Let's use these data to improve our graph:

```{python}

plt.figure()
pos = nx.kamada_kawai_layout(student_network)

# Set node size based on number of friends
node_sizes = [friendships['number of friends'].iloc[i]*40 for i in range(len(friendships))]

# Set node colors based on gender
node_colors = ["lightsteelblue" if student_attributes.loc[n].at['gender_num'] == 0 else "salmon" for n in student_network.nodes()]

# Set node options
node_options = {"node_color": node_colors, "node_size": [node_sizes[n] for n in student_network.nodes()]}

# Set edge options
edge_options = {"width": 0.5, "alpha": 0.5, "edge_color": "black"}

# Set label options
node_label_options = {"font_size": 7, "font_color": "black", "verticalalignment": "bottom", "horizontalalignment": "left"}

# Draw nodes, edges, labels
nx.draw_networkx_nodes(student_network, pos, **node_options)
nx.draw_networkx_edges(student_network, pos, **edge_options)
nx.draw_networkx_labels(student_network, pos, **node_label_options)
plt.show()

```

#### **üëâ Your Turn**¬†**‚§µ**

Use the code chunk below to try out these more sophisticated sociogram functions on your¬†`teacher_network`¬†object you created above:

```{python}
# YOUR CODE HERE


```

#### ‚ùìQuestion

Do the colors of the nodes in teachers' sociogram represent the same information as in the students' one? How do you know?

\*YOUR ANSWER HERE\*

Let's change teachers' network graph to display different node sizes depending on the number of friendships reported:

```{python}

friends_teach = [edge[0] for edge in teacher_network.edges()]

# Counting the number of friends
num_friends = Counter(friends_teach)

#store in a data frame
friendships_teach = pd.DataFrame(list(num_friends.items()), columns=['student', 'number of friends'])

print(friendships_teach)

```

It seems like teachers did not see any friendships between students 18, 19, and the rest of the class. So let's manually add them:

```{python}
new_row_1 = pd.DataFrame({'student': [18], 'number of friends': [0]})
new_row_2 = pd.DataFrame({'student': [19], 'number of friends': [0]})
friendships_teach = pd.concat([friendships_teach, new_row_1], ignore_index=True)
friendships_teach = pd.concat([friendships_teach, new_row_2], ignore_index=True)
friendships_teach = friendships_teach.sort_values(by='student')
print(friendships_teach)
```

#### **üëâ Your Turn**¬†**‚§µ**

Now that you have a sense of how the¬†**networkx**¬†package works to build network graphs, use the code chunk below and try building a sophisticated sociogram for the¬†`teacher_network`¬†object that you created changing the node size parameter.

```{python}
# YOUR CODE HERE
plt.figure(figsize=(10, 8))
pos = nx.kamada_kawai_layout(teacher_network)

# Set node size based on number of friends
node_sizes = [friendships_teach['number of friends'].iloc[i]*40 for i in range(len(friendships_teach))]#YOUR CODE HERE

# Set node colors based on gender
node_colors = ["lightsteelblue" if student_attributes.loc[n].at['gender_num'] == 0 else "salmon" for n in student_network.nodes()]

#set nodes
node_options={"node_color": node_colors, "node_size":[node_sizes[n] for n in student_network.nodes()]}
#set edges
edge_options = {"width":.50, "alpha":.5, "edge_color":"black"}
#set labels
node_label_options = {"font_size":7, "font_color":"black", "verticalalignment":"bottom", "horizontalalignment":"left"}

#draw nodes, edges, labels
nx.draw_networkx_nodes(teacher_network, pos, **node_options)
nx.draw_networkx_edges(teacher_network, pos, **edge_options)
nx.draw_networkx_labels(teacher_network, pos, **node_label_options)
plt.title('Teacher Sociogram')
plt.show()
```

**Note:**¬†If you're having difficulty seeing the sociogram in the small code chunk, you can copy and paste the code in the console and it will show in the Viewer pan and then you can enlarge and even save as an image file.

Congrats, you made it to the end of the EXPLORE section and created your first sociogram in Python!

## 4. MODEL

As highlighted in¬†[Chapter 3 of Data Science in Education Using R](https://datascienceineducation.com/c03.html), the¬†**Model**¬†step of the data science process entails "using statistical models, from simple to complex, to understand trends and patterns in the data." We will not explore the use of models for SNA until Lab 4, but recall from the PREPARE section that to assess agreement between perceived friendships by the teacher and students, [@pittinsky2008behavioral] note that:

> **The QAP (quadratic assignment procedure)** \[is\] used to calculate the degree of association between two sets of relations and tests whether the probability of dyad overlap in the teacher matrix is correlated with the probability of dyad overlap in the student matrix. It does so by running a large number of simulations. These simulations generate random matrices with sizes and value distributions based on the original two matrices being tested.

We will learn more about the QAP and other models for statistical inference when working with relational data in Learning Lab 4.

## 5. COMMUNICATE

The final step in the workflow/process is sharing the results of your analysis with wider audience. Krumm et al. @krumm2018 have outlined the following 3-step process for communicating with education stakeholders findings from an analysis:

1.  **Select.** Communicating what one has learned involves selecting among those analyses that are most important and most useful to an intended audience, as well as selecting a form for displaying that information, such as a graph or table in static or interactive form, i.e.¬†a "data product."

2.  **Polish**. After creating initial versions of data products, research teams often spend time refining or polishing them, by adding or editing titles, labels, and notations and by working with colors and shapes to highlight key points.

3.  **Narrate.** Writing a narrative to accompany the data products involves, at a minimum, pairing a data product with its related research question, describing how best to interpret the data product, and explaining the ways in which the data product helps answer the research question and might be used to inform new analyses or a "change idea" for improving student learning.

### Render File

For your SNA Badge, you will have an opportunity to create a simple "data product" designed to illustrate some insights gained from your analysis and ideally highlight an action step or change idea that can be used to improve learning or the contexts in which learning occurs.

For now, we will wrap up this case study by converting your work to an HTML file that can be published and used to communicate your learning and demonstrate some of your new R skills. To do so, you will need to "render" your document by clicking the ![](img/render.png){width="4%"} Render button in the menu bar at that the top of this file.

Rendering a document does two important things:

1.  checks through all your code for any errors; and,

2.  creates a file in your directory that you can use to share you work .

Now that you've finished your first case study, click the "Render" button in the toolbar at the top of your document to covert this Quarto document to a HTML web page, just one of [the many publishing formats you can create with Quarto](https://quarto.org/docs/output-formats/all-formats.html) documents.

If the files rendered correctly, you should now see a new file named `sna-1-case-study-R.html` in the Files tab located in the bottom right corner of R Studio. If so, congratulations, you just completed the getting started activity! You're now ready for the unit Case Studies that we will complete during the third week of each unit.

::: callout-important
If you encounter errors when you try to render, first check the case study answer key located in the files pane and has the suggested code for the Your Turns. If you are still having difficulties, try copying and pasting the error into Google or ChatGPT to see if you can resolve the issue. Finally, contact your instructor to debug the code together if you're still having issues.
:::

### Publish File

Rendered HTML files can be published online through a variety of ways including [Posit Cloud](https://posit.cloud/learn/guide#publish-from-cloud), [RPubs](#0) , [GitHub Pages](#0), [Quarto Pub](#0), or [other methods](#0). The easiest way to quickly publish your file online is to publish directly from RStudio. You can do so by clicking the "Publish" button located in the Viewer Pane after you render your document as illustrated in the screenshot below.

![](img/publish.png)

Congratulations, you've completed the case study! If you've already completed the Essential Readings, you're now ready to earn your first SNA LASER Badge!

### References
